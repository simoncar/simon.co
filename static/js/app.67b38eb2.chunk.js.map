{"version":3,"sources":["screens/NotFoundScreen.tsx","constants/Colors.ts","components/Themed.tsx","components/EditScreenInfo.tsx","screens/TabOneScreen.tsx","screens/TabTwoScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.web.ts","web-build/register-service-worker.js","assets/fonts/SpaceMono-Regular.ttf"],"names":["NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","EditScreenInfo","path","getStartedContainer","getStartedText","developmentModeText","marginBottom","lineHeight","textAlign","contentContainer","paddingTop","welcomeContainer","welcomeImage","width","height","resizeMode","marginLeft","marginHorizontal","homeScreenFilename","marginVertical","codeHighlightText","codeHighlightContainer","borderRadius","paddingHorizontal","helpContainer","helpLink","helpLinkText","TabOneScreen","separator","BottomTab","createBottomTabNavigator","BottomTabNavigator","Navigator","initialRouteName","tabBarOptions","activeTintColor","Screen","name","component","TabOneNavigator","options","tabBarIcon","TabBarIcon","Ionicons","size","TabOneStack","createStackNavigator","headerTitle","prefixes","Linking","config","screens","Root","TabOne","TabTwo","TabTwoScreen","NotFound","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","screenOptions","headerShown","App","React","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","font","require","console","warn","useCachedResources","StatusBar","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","module","exports"],"mappings":"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","file":"static/js/app.67b38eb2.chunk.js","sourcesContent":["import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n\treturn (\n\t\t<View>\n\t\t\t<View style={styles.getStartedContainer}>\n\t\t\t\t<Text\n\t\t\t\t\tstyle={styles.getStartedText}\n\t\t\t\t\tlightColor=\"rgba(0,0,0,0.8)\"\n\t\t\t\t\tdarkColor=\"rgba(255,255,255,0.8)\">\n\t\t\t\t\tsimoncar@gmail.com\n        </Text>\n\n\t\t\t</View>\n\t\t</View>\n\t);\n}\n\n\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#fff',\n\t},\n\tdevelopmentModeText: {\n\t\tmarginBottom: 20,\n\t\tfontSize: 14,\n\t\tlineHeight: 19,\n\t\ttextAlign: 'center',\n\t},\n\tcontentContainer: {\n\t\tpaddingTop: 30,\n\t},\n\twelcomeContainer: {\n\t\talignItems: 'center',\n\t\tmarginTop: 10,\n\t\tmarginBottom: 20,\n\t},\n\twelcomeImage: {\n\t\twidth: 100,\n\t\theight: 80,\n\t\tresizeMode: 'contain',\n\t\tmarginTop: 3,\n\t\tmarginLeft: -10,\n\t},\n\tgetStartedContainer: {\n\t\talignItems: 'center',\n\t\tmarginHorizontal: 50,\n\t},\n\thomeScreenFilename: {\n\t\tmarginVertical: 7,\n\t},\n\tcodeHighlightText: {\n\t\tcolor: 'rgba(96,100,109, 0.8)',\n\t},\n\tcodeHighlightContainer: {\n\t\tborderRadius: 3,\n\t\tpaddingHorizontal: 4,\n\t},\n\tgetStartedText: {\n\t\tfontSize: 17,\n\t\tlineHeight: 24,\n\t\ttextAlign: 'center',\n\t},\n\thelpContainer: {\n\t\tmarginTop: 15,\n\t\tmarginHorizontal: 20,\n\t\talignItems: 'center',\n\t},\n\thelpLink: {\n\t\tpaddingVertical: 15,\n\t},\n\thelpLinkText: {\n\t\ttextAlign: 'center',\n\t},\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabOneScreen() {\n\treturn (\n\t\t<View style={styles.container}>\n\t\t\t<Text style={styles.title}>simon.co </Text>\n\t\t\t<View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n\t\t\t<EditScreenInfo path=\"/screens/TabOneScreen.tsx\" />\n\t\t</View>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\ttitle: {\n\t\tfontSize: 20,\n\t\tfontWeight: 'bold',\n\t},\n\tseparator: {\n\t\tmarginVertical: 30,\n\t\theight: 1,\n\t\twidth: '80%',\n\t},\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab Two</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { BottomTabParamList, TabOneParamList, TabTwoParamList } from '../types';\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n\tconst colorScheme = useColorScheme();\n\n\treturn (\n\t\t<BottomTab.Navigator\n\t\t\tinitialRouteName=\"simon.co\"\n\t\t\ttabBarOptions={{ activeTintColor: Colors[colorScheme].tint }}>\n\t\t\t<BottomTab.Screen\n\t\t\t\tname=\"simon.co\"\n\t\t\t\tcomponent={TabOneNavigator}\n\t\t\t\toptions={{\n\t\t\t\t\ttabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t</BottomTab.Navigator>\n\t);\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: string; color: string }) {\n\treturn <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabOneStack = createStackNavigator<TabOneParamList>();\n\nfunction TabOneNavigator() {\n\treturn (\n\t\t<TabOneStack.Navigator>\n\t\t\t<TabOneStack.Screen\n\t\t\t\tname=\"TabOneScreen\"\n\t\t\t\tcomponent={TabOneScreen}\n\t\t\t\toptions={{ headerTitle: 'simon.co' }}\n\t\t\t/>\n\t\t</TabOneStack.Navigator>\n\t);\n}\n\nconst TabTwoStack = createStackNavigator<TabTwoParamList>();\n\nfunction TabTwoNavigator() {\n\treturn (\n\t\t<TabTwoStack.Navigator>\n\t\t\t<TabTwoStack.Screen\n\t\t\t\tname=\"TabTwoScreen\"\n\t\t\t\tcomponent={TabTwoScreen}\n\t\t\t\toptions={{ headerTitle: 'Tab Two Title' }}\n\t\t\t/>\n\t\t</TabTwoStack.Navigator>\n\t);\n}\n","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}